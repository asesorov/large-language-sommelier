import os
import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TG_TOKEN')
API_BASE_URL = "http://localhost:8000"


class WineRecommendationBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        # Default model settings
        self.model_server = "ollama"
        self.model_name = "qwen2.5:7b-instruct-q4_0"
        self.setup_handlers()

    def setup_handlers(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.command_start, Command("start"))
        self.dp.message.register(self.command_help, Command("help"))
        self.dp.message.register(self.command_switch, Command("switch"))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.dp.message.register(self.handle_message, F.text)

    async def get_wine_recommendation(self, question: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{API_BASE_URL}/recommend/",
                    json={
                        "query": {"question": question},
                        "model_choice": {
                            "model_server": self.model_server,
                            "model_name": self.model_name
                        }
                    },
                    headers={"Content-Type": "application/json"},
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
                        full_response = f"{data['response']}\n"
                        
                        return full_response
                    else:
                        error_text = await response.text()
                        logger.error(f"API error: Status {response.status}, Response: {error_text}")
                        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (Status: {response.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except aiohttp.ClientError as e:
            logger.error(f"Network error in get_wine_recommendation: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Unexpected error in get_wine_recommendation: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def command_start(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = (
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–º–µ–ª—å–µ-–±–æ—Ç.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –≤–∏–Ω–∞. –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
            "‚Ä¢ /switch –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏"
        )
        await message.answer(welcome_message, parse_mode=ParseMode.MARKDOWN)

    async def command_help(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "üç∑ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∏–Ω–æ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∏–Ω–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º\n"
            "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—Ç—å –≤–∏–Ω–∞ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –≤–∏–Ω\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ /switch - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
        )
        await message.answer(help_message, parse_mode=ParseMode.MARKDOWN)

    async def command_switch(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /switch –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        current_settings = (
            "üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏:\n"
            f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {self.model_server}\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {self.model_name}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (gigachat/ollama)\n"
            "2. –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        )
        await message.answer(current_settings, parse_mode=ParseMode.MARKDOWN)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.dp.message.register(
            self.handle_server_change,
            F.text,
            state=lambda msg: msg.from_user.id == message.from_user.id
        )

    async def handle_server_change(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        server = message.text.strip().lower()
        if server in ['gigachat', 'ollama']:
            self.model_server = server
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:",
                parse_mode=ParseMode.MARKDOWN
            )
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            self.dp.message.register(
                self.handle_model_change,
                F.text,
                state=lambda msg: msg.from_user.id == message.from_user.id
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ gigachat –∏–ª–∏ ollama.",
                parse_mode=ParseMode.MARKDOWN
            )

    async def handle_model_change(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        self.model_name = message.text.strip()
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n‚Ä¢ –°–µ—Ä–≤–µ—Ä: {self.model_server}\n‚Ä¢ –ú–æ–¥–µ–ª—å: {self.model_name}",
            parse_mode=ParseMode.MARKDOWN
        )
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.filters.clear()
        self.setup_handlers()

    async def handle_message(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", parse_mode=ParseMode.MARKDOWN)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            response = await self.get_wine_recommendation(message.text)

            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await processing_msg.delete()
            except Exception as e:
                logger.error(f"Error deleting processing message: {e}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await message.answer(response, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"Error in handle_message: {e}")
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.MARKDOWN
            )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("Starting bot...")
            await self.dp.start_polling(self.bot)
        finally:
            await self.bot.session.close()


async def check_api_availability() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE_URL}/") as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"API check error: {e}")
        return False

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_TOKEN:
        logger.error("Telegram token not found in environment variables!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    if not await check_api_availability():
        logger.error("Wine Recommendation API is not available!")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = WineRecommendationBot(TELEGRAM_TOKEN)
    await bot.start()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped!")
